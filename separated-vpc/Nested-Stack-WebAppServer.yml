Description:  WebApp Server

Parameters:
  SSMIAMRole:
    Description: SSM IAM Role passed from ssm stack 
    Type: String
  EC2KEY:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Arm64AmiId: 
    Type: String
    Default: ami-004fe950390345df6
  ApplicationServerInstanceType:
    Description: Choose instance type
    Type: String
    Default: t4g.micro
    AllowedValues:
      - t4g.micro
      - t4g.small
  VPC1:
    Type: String  
  VPC1CIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.1.0.0/16
  VPC1PrivateSubnet1:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
  VPC1PrivateSubnet2:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String

Resources:
  VPC1SecurtiyGroup4:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: WebAppServer
      GroupDescription: WebAppServer
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref VPC1CIDR
          Description: Allow 80 from VPC
        - IpProtocol: tcp 
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref VPC1CIDR
          Description: Allow 22 from VPC
        - IpProtocol: icmp # allow ping from anywhere
          FromPort: '8'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
          Description: Allow Ping from anywhere
      Tags:
        - Key: Name
          Value:  WebAppServer

  # Application Server 
  VPC1VM4:
    Type: 'AWS::EC2::Instance'
    DependsOn: VPC1SecurtiyGroup4
    Properties:
      KeyName: !Ref EC2KEY
      ImageId: !Ref Arm64AmiId
      InstanceType: !Ref ApplicationServerInstanceType
      IamInstanceProfile: !Ref SSMIAMRole
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      SubnetId: !Ref VPC1PrivateSubnet1
      Monitoring: true
      BlockDeviceMappings: # Use gp3 as root disk @2021-01-31
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 10
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref VPC1SecurtiyGroup4
      Tags:
        - Key: Name
          Value: WebApp1
      UserData:
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            mkdir -p /var/www/html
            yum update -y
            yum install httpd -y
            systemctl start httpd
            systemctl enable httpd
            echo "Web Server 1" > /var/www/html/index.html

  VPC1VM5:
    Type: 'AWS::EC2::Instance'
    DependsOn: VPC1SecurtiyGroup4
    Properties:
      KeyName: !Ref EC2KEY
      ImageId: !Ref Arm64AmiId
      InstanceType: !Ref ApplicationServerInstanceType
      IamInstanceProfile: !Ref SSMIAMRole
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      SubnetId: !Ref VPC1PrivateSubnet2
      Monitoring: true
      BlockDeviceMappings: # Use gp3 as root disk @2021-01-31
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 10
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref VPC1SecurtiyGroup4
      Tags:
        - Key: Name
          Value: WebApp2
      UserData:
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            mkdir -p /var/www/html
            yum update -y
            yum install httpd -y
            systemctl start httpd
            systemctl enable httpd
            echo "Web Server 2" > /var/www/html/index.html

Outputs:
    VPC1WebApp1PrivateIP: 
      Value: !GetAtt VPC1VM4.PrivateIp
    VPC1WebApp2PrivateIP: 
      Value: !GetAtt VPC1VM5.PrivateIp