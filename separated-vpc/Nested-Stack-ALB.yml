Description:  ALB

Parameters:
  VPC1:
    Type: String
  VPC1CIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.1.0.0/16
  VPC1NATSubnet1:
    Type: String
  VPC1NATSubnet2:
    Type: String
  VPC1WebApp1PrivateIP:
    Type: String 
  VPC1WebApp2PrivateIP:
    Type: String 

Resources:
  VPC1SecurtiyGroup5:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ALB80
      GroupDescription: Allow 80
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow 80 from anywhere
      Tags:
        - Key: Name
          Value:  ALB allow 80

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', ['alb', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      Scheme: internet-facing
      Type: application
      SecurityGroups: 
        - !Ref VPC1SecurtiyGroup5
      Tags:
        - Key: Name
          Value: !Join ['-', ['GWLB-ingress ALB', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      Subnets: 
        - !Ref VPC1NATSubnet1
        - !Ref VPC1NATSubnet2

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', ['ALB', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      Port: 80
      Protocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: "/index.html"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC1
      TargetType: ip
      Targets: 
        - Id: !Ref VPC1WebApp1PrivateIP
        - Id: !Ref VPC1WebApp2PrivateIP
      Tags:
        - Key: Name
          Value: !Join ['-', ['ALB', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB

Outputs:
    ALBEndpoint:
      Value: !GetAtt ALB.DNSName
